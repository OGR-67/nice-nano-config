/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEFAULT 0
#define LOW_L   1
#define RAI_L   2
#define BKS_L   3
#define ADJ_L   4

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        one_and_two_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };

        one_and_tree_layer {
            if-layers = <1 3>;
            then-layer = <4>;
        };
    };

    behaviors {
        colonexcl: colon_excl {
            compatible = "zmk,behavior-mod-morph";
            label = "COLON_EXCL";
            #binding-cells = <0>;
            bindings = <&kp COLON>, <&kp EXCL>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        underpipe: under_pipe {
            compatible = "zmk,behavior-mod-morph";
            label = "UNDER_PIPE";
            #binding-cells = <0>;
            bindings = <&kp UNDER>, <&kp PIPE>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        athash: at_hash {
            compatible = "zmk,behavior-mod-morph";
            label = "AT_HASH";
            #binding-cells = <0>;
            bindings = <&kp AT>, <&kp HASH>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        bkspdel: bksp_del {
            compatible = "zmk,behavior-mod-morph";
            label = "BKSP_DEL";
            #binding-cells = <0>;
            bindings = <&kp BKSP>, <&kp DEL>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        lparrpar: lpar_rpar {
            compatible = "zmk,behavior-mod-morph";
            label = "LPAR_RPAR";
            #binding-cells = <0>;
            bindings = <&kp LPAR>, <&kp RPAR>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        lbktrbkt: lbkt_rbkt {
            compatible = "zmk,behavior-mod-morph";
            label = "LBKT_RBKT";
            #binding-cells = <0>;
            bindings = <&kp LBKT>, <&kp RBKT>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        lbrcrbrc: lbrc_rbrc {
            compatible = "zmk,behavior-mod-morph";
            label = "LBRC_RBRC";
            #binding-cells = <0>;
            bindings = <&kp LBRC>, <&kp RBRC>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        plusminus: plus_minus {
            compatible = "zmk,behavior-mod-morph";
            label = "PLUS_MINUS";
            #binding-cells = <0>;
            bindings = <&kp KP_PLUS>, <&kp KP_MINUS>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        multdivive: mult_divive {
            compatible = "zmk,behavior-mod-morph";
            label = "MULT_DIVIDE";
            #binding-cells = <0>;
            bindings = <&kp KP_MULTIPLY>, <&kp KP_DIVIDE>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dotcomma: dot_comma {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_COMMA";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COMMA>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        period {
            bindings = <&kp PERIOD>;
            key-positions = <21 22>;
        };

        colon {
            bindings = <&kp COLON>;
            key-positions = <19 21 22>;
        };

        single-quote {
            bindings = <&kp SQT>;
            key-positions = <8 21>;
        };

        double-quotes {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <7 21>;
        };

        semi-colon {
            bindings = <&kp SEMI>;
            key-positions = <19 20 21>;
            timeout-ms = <40>;
        };

        comma {
            bindings = <&kp COMMA>;
            key-positions = <20 21>;
        };

        slash {
            bindings = <&kp SLASH>;
            key-positions = <20 31>;
        };

        backslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <20 33>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <40 18>;
        };

        less-than {
            bindings = <&kp LESS_THAN>;
            key-positions = <20 30 40>;
            timeout-ms = <40>;
        };

        greater-than {
            bindings = <&kp GREATER_THAN>;
            key-positions = <40 19 32>;
            timeout-ms = <40>;
        };

        carret {
            bindings = <&kp CARET>;
            key-positions = <19 8 21>;
            timeout-ms = <40>;
        };

        tilde {
            bindings = <&kp TILDE>;
            key-positions = <19 10>;
        };

        grave-accent {
            bindings = <&kp GRAVE>;
            key-positions = <20 7>;
            timeout-ms = <40>;
        };

        percent {
            bindings = <&kp PERCENT>;
            key-positions = <7 33>;
        };

        exclamation {
            bindings = <&kp EXCL>;
            key-positions = <7 8 21>;
            timeout-ms = <40>;
        };

        question {
            bindings = <&kp QUESTION>;
            key-positions = <19 20 9>;
            timeout-ms = <40>;
        };

        dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <31 32 21>;
            timeout-ms = <40>;
        };

        at {
            bindings = <&kp AT_SIGN>;
            key-positions = <13 5>;
        };

        asterisk {
            bindings = <&kp ASTRK>;
            key-positions = <30 32 31>;
        };

        hash {
            bindings = <&kp HASH>;
            key-positions = <6 7 8>;
        };

        ampersand {
            bindings = <&kp AMPERSAND>;
            key-positions = <30 13 15>;
        };

        underscore {
            bindings = <&kp UNDER>;
            key-positions = <30 31>;
        };

        dash {
            bindings = <&kp MINUS>;
            key-positions = <18 19>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <6 7>;
        };

        plus {
            bindings = <&kp LS(EQUAL)>;
            key-positions = <18 20 19>;
            timeout-ms = <40>;
        };

        open-parenthesis {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <40 19>;
        };

        close-parenthesis {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <40 20>;
        };

        open-bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <40 7>;
            timeout-ms = <40>;
        };

        close-bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <40 8>;
            timeout-ms = <40>;
        };

        open-curly-brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <40 31>;
            timeout-ms = <40>;
        };

        close-curly-brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <40 32>;
            timeout-ms = <40>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp ESC           &kp Q  &kp W  &kp E  &kp R      &kp T          &kp Y            &kp U  &kp I           &kp O     &kp P   &kp BACKSPACE
&mt LEFT_ALT TAB  &kp A  &kp S  &kp D  &kp F      &kp G          &kp H            &kp J  &kp K           &kp L     &none   &mt RIGHT_ALT LS(TAB)
&kp LEFT_COMMAND  &kp Z  &kp X  &kp C  &kp V      &kp B          &kp N            &kp M  &kp LEFT_ARROW  &kp DOWN  &kp UP  &kp RIGHT
                                &mo 2  &kp LCTRL  &lt 1 SPACE    &kp RIGHT_SHIFT  &none  &kp ENTER
            >;
        };

        lower_layer {
            bindings = <
&none   &none  &none  &none   &none   &none     &kp COMMA        &kp N7        &kp N8        &kp N9        &kp MINUS      &trans
&trans  &none  &none  &none   &none   &none     &kp PERIOD       &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp LS(EQUAL)  &mt RIGHT_ALT BACKSLASH
&none   &none  &none  &none   &none   &none     &kp N0           &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp SLASH      &kp ASTERISK
                      &trans  &trans  &trans    &kp RIGHT_SHIFT  &mo 1         &trans
            >;
        };

        raise_layer {
            bindings = <
&kp F1  &kp F2  &kp F3  &kp F4       &kp F5      &kp F6       &kp F7          &kp F8          &kp F9        &kp F10          &kp F11  &kp F12
&none   &none   &none   &kp K_PASTE  &kp K_COPY  &kp K_CUT    &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW  &none    &none
&none   &none   &none   &none        &none       &none        &none           &none           &none         &none            &none    &none
                        &mo BKS_L    &trans      &trans       &trans          &trans          &trans
            >;
        };

        bkp_layer {
            bindings = <
&none       &none         &none         &none         &none         &lbktrbkt       &lbktrbkt  &none  &none  &none  &none  &none
&none       &none         &none         &none         &none         &none           &none      &none  &none  &none  &none  &none
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &none      &none  &none  &none  &none  &none
                                        &none         &none         &none           &to ADJ_L  &none  &none
            >;
        };

        adjust_layer {
            bindings = <
&sys_reset   &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &sys_reset
&bootloader  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &bootloader
&none        &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
                           &none  &none  &none    &none  &none  &none
            >;
        };
    };
};
