/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEFAULT 0
#define LOW_L   1
#define RAI_L   2
#define BKS_L   3
#define ADJ_L   4

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        one_and_two_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };

        one_and_tree_layer {
            if-layers = <1 3>;
            then-layer = <4>;
        };
    };

    behaviors {
        colonexcl: colon_excl {
            compatible = "zmk,behavior-mod-morph";
            label = "COLON_EXCL";
            #binding-cells = <0>;
            bindings = <&kp COLON>, <&kp EXCL>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        underpipe: under_pipe {
            compatible = "zmk,behavior-mod-morph";
            label = "UNDER_PIPE";
            #binding-cells = <0>;
            bindings = <&kp UNDER>, <&kp PIPE>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        athash: at_hash {
            compatible = "zmk,behavior-mod-morph";
            label = "AT_HASH";
            #binding-cells = <0>;
            bindings = <&kp AT>, <&kp HASH>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        bkspdel: bksp_del {
            compatible = "zmk,behavior-mod-morph";
            label = "BKSP_DEL";
            #binding-cells = <0>;
            bindings = <&kp BKSP>, <&kp DEL>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        lparrpar: lpar_rpar {
            compatible = "zmk,behavior-mod-morph";
            label = "LPAR_RPAR";
            #binding-cells = <0>;
            bindings = <&kp LPAR>, <&kp RPAR>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        lbktrbkt: lbkt_rbkt {
            compatible = "zmk,behavior-mod-morph";
            label = "LBKT_RBKT";
            #binding-cells = <0>;
            bindings = <&kp LBKT>, <&kp RBKT>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        lbrcrbrc: lbrc_rbrc {
            compatible = "zmk,behavior-mod-morph";
            label = "LBRC_RBRC";
            #binding-cells = <0>;
            bindings = <&kp LBRC>, <&kp RBRC>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        plusminus: plus_minus {
            compatible = "zmk,behavior-mod-morph";
            label = "PLUS_MINUS";
            #binding-cells = <0>;
            bindings = <&kp KP_PLUS>, <&kp KP_MINUS>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        multdivive: mult_divive {
            compatible = "zmk,behavior-mod-morph";
            label = "MULT_DIVIDE";
            #binding-cells = <0>;
            bindings = <&kp KP_MULTIPLY>, <&kp KP_DIVIDE>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dotcomma: dot_comma {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_COMMA";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COMMA>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp ESC                 &kp Q  &kp W  &kp E     &kp R                &kp T          &kp Y            &kp U  &kp I      &kp O    &kp P          &kp BACKSPACE
&mt LEFT_ALT TAB        &kp A  &kp S  &kp D     &kp F                &kp G          &kp H            &kp J  &kp K      &kp L    &kp SEMICOLON  &mt RIGHT_ALT SQT
&mt LEFT_SHIFT LS(TAB)  &kp Z  &kp X  &kp C     &kp V                &kp B          &kp N            &kp M  &kp COMMA  &kp DOT  &kp SLASH      &kp DELETE
                                      &kp LGUI  &mt LCTRL BACKSPACE  &lt 2 SPACE    &kp RIGHT_SHIFT  &mo 1  &kp ENTER
            >;
        };

        lower_layer {
            bindings = <
&kp GRAVE             &kp EXCLAMATION  &kp AT_SIGN   &kp HASH        &kp DOLLAR        &kp PERCENT       &kp CARET        &kp AMPERSAND      &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans
&trans                &kp NUMBER_1     &kp NUMBER_2  &kp NUMBER_3    &kp NUMBER_4      &kp N5            &kp NUMBER_6     &kp N7             &kp N8        &kp N9                &kp N0                 &mt RIGHT_ALT BACKSLASH
&mt LEFT_SHIFT COMMA  &kp PERIOD       &kp MINUS     &kp UNDERSCORE  &kp LEFT_BRACKET  &kp LEFT_BRACE    &kp RIGHT_BRACE  &kp RIGHT_BRACKET  &kp EQUAL     &kp GREATER_THAN      &kp PLUS               &trans
                                                     &trans          &trans            &trans            &kp RIGHT_SHIFT  &mo 1              &trans
            >;
        };

        raise_layer {
            bindings = <
&kp F1  &kp F2  &kp F3  &kp F4       &kp F5      &kp F6       &kp F7          &kp F8          &kp F9        &kp F10          &kp F11  &kp F12
&none   &none   &none   &kp K_PASTE  &kp K_COPY  &kp K_CUT    &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW  &none    &none
&none   &none   &none   &none        &none       &none        &none           &none           &none         &none            &none    &none
                        &mo BKS_L    &trans      &trans       &trans          &trans          &trans
            >;
        };

        bkp_layer {
            bindings = <
&none       &none         &none         &none         &none         &lbktrbkt       &lbktrbkt  &none  &none  &none  &none  &none
&none       &none         &none         &none         &none         &none           &none      &none  &none  &none  &none  &none
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &none      &none  &none  &none  &none  &none
                                        &none         &none         &none           &to ADJ_L  &none  &none
            >;
        };

        adjust_layer {
            bindings = <
&sys_reset   &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &sys_reset
&bootloader  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &bootloader
&none        &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
                           &none  &none  &none    &none  &none  &none
            >;
        };
    };
};
